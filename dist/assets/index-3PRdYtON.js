(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))o(n);new MutationObserver(n=>{for(const a of n)if(a.type==="childList")for(const s of a.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&o(s)}).observe(document,{childList:!0,subtree:!0});function r(n){const a={};return n.integrity&&(a.integrity=n.integrity),n.referrerPolicy&&(a.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?a.credentials="include":n.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function o(n){if(n.ep)return;n.ep=!0;const a=r(n);fetch(n.href,a)}})();const A=()=>!!localStorage.getItem("token"),Y=()=>{localStorage.removeItem("token")};function Q(){const e=document.createElement("nav");return e.innerHTML=`
    <ul class="nav-links">
      <li><a href="#/">Home</a></li>
      ${A()?`
        <li><a href="#/add">Add Story</a></li>
        <li><a href="#/save">Simpan Cerita</a></li> <!-- Menu untuk Simpan Cerita -->
        <li><a href="#" id="logout">Logout</a></li>
      `:`
        <li><a href="#/login">Login</a></li>
        <li><a href="#/register">Register</a></li>
      `}
    </ul>
  `,A()&&e.querySelector("#logout").addEventListener("click",()=>{Y(),window.localStorage.removeItem("token"),window.location.hash="/login",window.location.reload()}),e}const b="https://story-api.dicoding.dev/v1";console.log("BASE_URL in api.js:",b);const X=async(e,t)=>{try{const r=await fetch(`${b}/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:e,password:t})});if(!r.ok){const n=await r.json();throw new Error(`Login gagal: ${n.message||r.statusText}`)}const o=await r.json();return o.loginResult&&o.loginResult.token&&(localStorage.setItem("token",o.loginResult.token),console.log("Login berhasil:",o)),o}catch(r){throw console.error("login error:",r.message),alert("Login gagal: "+r.message),r}},Z=async(e,t,r)=>{try{const o=await fetch(`${b}/register`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:e,email:t,password:r})});if(!o.ok){const n=await o.json();throw new Error(`Register gagal: ${n.message||o.statusText}`)}return await o.json()}catch(o){throw console.error("register error:",o.message),alert("Pendaftaran gagal: "+o.message),o}};async function ee(e,t){if(!t){console.error("Token tidak ditemukan"),alert("Anda harus login terlebih dahulu untuk menerima notifikasi");return}try{delete e.expirationTime;const r=await fetch(`${b}/notifications/subscribe`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify(e)}),o=await r.json();if(!r.ok)throw console.error("subscribePushNotification error: ",o),new Error(`Failed to subscribe push notification: ${o.message}`);return o}catch(r){throw console.error("subscribePushNotification error:",r.message),r}}const T=(e,t)=>t.some(r=>e instanceof r);let H,q;function te(){return H||(H=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])}function re(){return q||(q=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])}const I=new WeakMap,E=new WeakMap,v=new WeakMap;function ne(e){const t=new Promise((r,o)=>{const n=()=>{e.removeEventListener("success",a),e.removeEventListener("error",s)},a=()=>{r(g(e.result)),n()},s=()=>{o(e.error),n()};e.addEventListener("success",a),e.addEventListener("error",s)});return v.set(t,e),t}function oe(e){if(I.has(e))return;const t=new Promise((r,o)=>{const n=()=>{e.removeEventListener("complete",a),e.removeEventListener("error",s),e.removeEventListener("abort",s)},a=()=>{r(),n()},s=()=>{o(e.error||new DOMException("AbortError","AbortError")),n()};e.addEventListener("complete",a),e.addEventListener("error",s),e.addEventListener("abort",s)});I.set(e,t)}let M={get(e,t,r){if(e instanceof IDBTransaction){if(t==="done")return I.get(e);if(t==="store")return r.objectStoreNames[1]?void 0:r.objectStore(r.objectStoreNames[0])}return g(e[t])},set(e,t,r){return e[t]=r,!0},has(e,t){return e instanceof IDBTransaction&&(t==="done"||t==="store")?!0:t in e}};function R(e){M=e(M)}function ae(e){return re().includes(e)?function(...t){return e.apply(x(this),t),g(this.request)}:function(...t){return g(e.apply(x(this),t))}}function ie(e){return typeof e=="function"?ae(e):(e instanceof IDBTransaction&&oe(e),T(e,te())?new Proxy(e,M):e)}function g(e){if(e instanceof IDBRequest)return ne(e);if(E.has(e))return E.get(e);const t=ie(e);return t!==e&&(E.set(e,t),v.set(t,e)),t}const x=e=>v.get(e);function se(e,t,{blocked:r,upgrade:o,blocking:n,terminated:a}={}){const s=indexedDB.open(e,t),c=g(s);return o&&s.addEventListener("upgradeneeded",i=>{o(g(s.result),i.oldVersion,i.newVersion,g(s.transaction),i)}),r&&s.addEventListener("blocked",i=>r(i.oldVersion,i.newVersion,i)),c.then(i=>{a&&i.addEventListener("close",()=>a()),n&&i.addEventListener("versionchange",l=>n(l.oldVersion,l.newVersion,l))}).catch(()=>{}),c}const ce=["get","getKey","getAll","getAllKeys","count"],le=["put","add","delete","clear"],P=new Map;function F(e,t){if(!(e instanceof IDBDatabase&&!(t in e)&&typeof t=="string"))return;if(P.get(t))return P.get(t);const r=t.replace(/FromIndex$/,""),o=t!==r,n=le.includes(r);if(!(r in(o?IDBIndex:IDBObjectStore).prototype)||!(n||ce.includes(r)))return;const a=async function(s,...c){const i=this.transaction(s,n?"readwrite":"readonly");let l=i.store;return o&&(l=l.index(c.shift())),(await Promise.all([l[r](...c),n&&i.done]))[0]};return P.set(t,a),a}R(e=>({...e,get:(t,r,o)=>F(t,r)||e.get(t,r,o),has:(t,r)=>!!F(t,r)||e.has(t,r)}));const de=["continue","continuePrimaryKey","advance"],$={},C=new WeakMap,U=new WeakMap,ue={get(e,t){if(!de.includes(t))return e[t];let r=$[t];return r||(r=$[t]=function(...o){C.set(this,U.get(this)[t](...o))}),r}};async function*me(...e){let t=this;if(t instanceof IDBCursor||(t=await t.openCursor(...e)),!t)return;t=t;const r=new Proxy(t,ue);for(U.set(r,t),v.set(r,x(t));t;)yield r,t=await(C.get(r)||t.continue()),C.delete(r)}function j(e,t){return t===Symbol.asyncIterator&&T(e,[IDBIndex,IDBObjectStore,IDBCursor])||t==="iterate"&&T(e,[IDBIndex,IDBObjectStore])}R(e=>({...e,get(t,r,o){return j(t,r)?me:e.get(t,r,o)},has(t,r){return j(t,r)||e.has(t,r)}}));const ge="story-db",f="stories";async function S(){return await se(ge,1,{upgrade(t){t.objectStoreNames.contains(f)||t.createObjectStore(f,{keyPath:"id"})}})}async function V(){return await(await S()).getAll(f)}async function pe(e){const r=(await S()).transaction(f,"readwrite");e.forEach(o=>r.store.put(o)),await r.done,console.log("Cerita berhasil disimpan di IndexedDB:",e)}async function he(e){const r=(await S()).transaction(f,"readwrite");await r.store.delete(e),await r.done,console.log(`Cerita dengan ID ${e} telah dihapus dari IndexedDB.`)}async function fe(){const t=(await S()).transaction(f,"readwrite");await t.store.clear(),await t.done,console.log("All stories cleared from IndexedDB")}console.log("BASE_URL in home.js:",b);const N=(e,t)=>{const r=new Image;return r.src=e,r.onerror=()=>{r.src=t},r},O=e=>{const t=document.createElement("li");return t.classList.add("story-card"),t.innerHTML=`
    <div style="border: 1px solid #ddd; padding: 10px; border-radius: 8px; margin-bottom: 10px;">
      <h3>${e.name}</h3>
      <p>${e.description}</p>
      <button class="save-button" style="background-color: #4CAF50; color: white; padding: 5px 10px; border: none; cursor: pointer;">Simpan Cerita</button>
    </div>
  `,t.querySelector(".save-button").addEventListener("click",()=>{be(e),alert("Cerita berhasil disimpan!")}),t};async function be(e){const r=(await getDb()).transaction(STORE_NAME,"readwrite");await r.store.put(e),await r.done,console.log(`Cerita dengan ID ${e.id} berhasil disimpan.`)}async function ye(){const e=document.createElement("div"),t=localStorage.getItem("token");if(!t)return e.innerHTML=`
      <h2>Hai Selamat Datang!</h2>
      <p>Silakan login terlebih dahulu untuk melihat cerita.</p>
    `,e;e.innerHTML=`
    <h2>List Cerita</h2>
    <div id="map" style="height: 300px; border-radius: 8px; margin-bottom: 1rem;"></div>
    <ul id="storyList"></ul>
  `;const r=e.querySelector("#storyList"),o=e.querySelector("#map"),n=L.map(o).setView([-6.2,106.8],5);L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(n);const a=async c=>{console.log("Mengambil cerita dari API...");try{const i=await fetch(`${b}/stories?page=1&size=10&location=0`,{headers:{Authorization:`Bearer ${c}`}});if(!i.ok){const p=await i.json();throw console.error("Error Data:",p),new Error("Gagal mengambil cerita dari server")}const l=await i.json();return console.log("Data Cerita:",l),l}catch(i){throw console.error("Error mengambil cerita:",i.message),alert("Terjadi kesalahan saat mengambil cerita: "+i.message),i}},s=await V();if(console.log("Cerita dari IndexedDB:",s),s.length?(console.log("Menampilkan cerita dari cache..."),s.forEach(c=>{const i=O(c);r.appendChild(i),c.lat&&c.lon&&L.marker([c.lat,c.lon]).addTo(n).bindPopup(`<strong>${c.name}</strong><br/>${c.description}`);const l=N(c.photoUrl,"/images/default-image.png");i.appendChild(l)})):console.log("Tidak ada data dari IndexedDB."),navigator.onLine){console.log("Mencoba mengambil cerita dari server...");try{const{listStory:c}=await a(t);console.log("Cerita yang diambil dari server:",c),r.innerHTML="",await fe(),await pe(c),c.forEach(i=>{const l=O(i);r.appendChild(l),i.lat&&i.lon&&L.marker([i.lat,i.lon]).addTo(n).bindPopup(`<strong>${i.name}</strong><br/>${i.description}`);const p=N(i.photoUrl,"/images/default-image.png");l.appendChild(p)})}catch(c){e.innerHTML+="<p>Gagal mengambil cerita dari server, tampilkan data offline.</p>",console.error("Error mengambil cerita:",c.message)}}else e.innerHTML+="<p>Anda sedang offline, menampilkan data terakhir yang tersimpan.</p>";return document.body.appendChild(e),e}async function we(){const e=document.createElement("div");return e.innerHTML=`
    <h2>Login</h2>
    <form id="loginForm">
      <label for="email">Email</label>
      <input id="email" type="email" required />
      <label for="password">Password</label>
      <input id="password" type="password" required />
      <button type="submit">Login</button>
    </form>
  `,e.querySelector("#loginForm").addEventListener("submit",async t=>{t.preventDefault();const r=e.querySelector("#email").value,o=e.querySelector("#password").value;try{const n=await X(r,o);if(n.error)alert(n.message);else{const a=n.loginResult.token;localStorage.setItem("token",a),console.log("Token disimpan:",a),window.location.hash="/"}}catch(n){alert("Login gagal: "+n.message)}}),e}async function ve(){const e=document.createElement("div");return e.innerHTML=`
    <h2>Register</h2>
    <form id="registerForm">
      <label for="name">Nama</label>
      <input id="name" type="text" required />
      <label for="email">Email</label>
      <input id="email" type="email" required />
      <label for="password">Password</label>
      <input id="password" type="password" required />
      <button type="submit">Daftar</button>
    </form>
  `,e.querySelector("#registerForm").addEventListener("submit",async t=>{t.preventDefault();const r=e.querySelector("#name").value,o=e.querySelector("#email").value,n=e.querySelector("#password").value,a=await Z(r,o,n);a.error?alert(a.message):(alert("Registrasi berhasil! Silakan login."),window.location.hash="/login")}),e}class Se{constructor(t,r){this.model=t,this.view=r}async addStory(t,r,o){try{this.view.showLoading(),(await this.model.addStory(t,r,o)).error?this.view.renderFailedMessage():this.view.renderStorySuccess()}catch{this.view.renderFailedMessage()}}}const Le="https://story-api.dicoding.dev/v1";class ke{async addStory(t,r,o){try{const n=new FormData;n.append("description",r),n.append("photo",o);const a=await fetch(`${Le}/stories`,{method:"POST",headers:{Authorization:`Bearer ${t}`},body:n});if(!a.ok){const s=await a.json();throw console.error("addStory error:",s),new Error(`Gagal menambahkan cerita: ${s.message}`)}return await a.json()}catch(n){throw console.error("addStory error:",n.message),n}}}async function Ee(){const e=document.createElement("div");e.innerHTML=`
    <h2>Tambah Cerita</h2>
    <form id="storyForm">
      <label for="description">Deskripsi</label><br/>
      <textarea id="description" required rows="4" cols="50"></textarea><br/>

      <label for="photo">Ambil Foto / Upload</label><br/>
      <video id="video" width="100%" height="auto" style="border: 1px solid black;"></video><br/>
      <button type="button" id="take-photo">Ambil Foto</button>
      <canvas id="canvas" style="display: none;"></canvas>
      <div id="photoPreview" style="margin-top: 1rem;"></div>

      <label>Pilih Lokasi di Peta:</label>
      <div id="map" style="height: 300px; margin-bottom: 1rem;"></div>
      <input type="hidden" id="lat" name="lat" />
      <input type="hidden" id="lon" name="lon" />

      <button type="submit">Kirim Cerita</button>
    </form>
  `;const t=new ke,r=new Se(t,{showLoading:_,renderFailedMessage:J,renderStorySuccess:G}),o=L.map(e.querySelector("#map")).setView([-6.2,106.8],5);L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(o);let n;o.on("click",function(u){const{lat:d,lng:m}=u.latlng;e.querySelector("#lat").value=d,e.querySelector("#lon").value=m,n?n.setLatLng([d,m]):n=L.marker([d,m]).addTo(o)});const a=e.querySelector("#video"),s=e.querySelector("#canvas"),c=e.querySelector("#photoPreview"),i=e.querySelector("#take-photo");let l;try{l=await navigator.mediaDevices.getUserMedia({video:!0}),a.srcObject=l,a.onloadedmetadata=()=>{a.play()}}catch(u){console.error("Camera not available:",u),alert("Unable to access device camera.")}i.addEventListener("click",()=>{const u=s.getContext("2d");s.width=a.videoWidth,s.height=a.videoHeight,u.drawImage(a,0,0,s.width,s.height);const d=s.toDataURL("image/png");c.innerHTML=`<img src="${d}" alt="Preview" style="max-width: 100%; max-height: 200px;" />`,p()});function p(){l&&l.getTracks().forEach(d=>d.stop())}const k=e.querySelector("#storyForm");k.addEventListener("submit",async u=>{u.preventDefault();const d=e.querySelector("#description").value,m=s.toDataURL("image/png"),y=e.querySelector("#lat").value,w=e.querySelector("#lon").value;if(!m){alert("Foto wajib diambil!");return}const h=K(m),z=localStorage.getItem("token");await r.addStory(z,d,h,y,w),await saveStoryToDb({name:"New Story",description:d,photoUrl:m,lat:y,lon:w}),k.reset(),c.innerHTML="",window.location.hash="/"});function K(u){const d=atob(u.split(",")[1]),m=u.split(",")[0].split(":")[1].split(";")[0],y=new ArrayBuffer(d.length),w=new Uint8Array(y);for(let h=0;h<d.length;h++)w[h]=d.charCodeAt(h);return new Blob([y],{type:m})}function _(){e.innerHTML="Loading..."}function J(){e.innerHTML="Gagal menambahkan cerita. Silakan coba lagi."}function G(){e.innerHTML="Cerita berhasil ditambahkan!"}return e}function Pe(){const e=document.createElement("div");e.innerHTML=`
    <h2>Cerita yang Disimpan</h2>
    <ul id="savedStoryList" style="list-style: none; padding: 0;"></ul>
  `;const t=e.querySelector("#savedStoryList");async function r(){const o=await V();t.innerHTML="",o.length===0?t.innerHTML="<li>Belum ada cerita yang disimpan.</li>":o.forEach(n=>{const a=document.createElement("li");a.innerHTML=`
          <div style="border: 1px solid #ddd; padding: 10px; border-radius: 8px; margin-bottom: 10px;">
            <h4>${n.name}</h4>
            <p>${n.description}</p>
            <img src="${n.photoUrl}" alt="Foto Cerita" style="max-width: 100px; max-height: 100px; margin-bottom: 10px;">
            <button class="delete-button" style="background-color: #f44336; color: white; padding: 5px 10px; border: none; cursor: pointer;">Hapus</button>
          </div>
        `,a.querySelector(".delete-button").addEventListener("click",()=>{he(n.id),a.remove(),alert("Cerita berhasil dihapus!")}),t.appendChild(a)})}return r(),e}const De={"/":ye,"/login":we,"/register":ve,"/add":Ee,"/save":Pe};async function B(e){const t=e.replace("#","")||"/",r=De[t];if(!r){document.body.innerHTML="<h2>404 - Halaman tidak ditemukan</h2>";return}const o=await r(),n=document.getElementById("app");document.startViewTransition?document.startViewTransition(()=>{n.innerHTML="",n.appendChild(o)}):(n.innerHTML="",n.appendChild(o))}window.addEventListener("hashchange",()=>B(location.hash));window.addEventListener("load",()=>B(location.hash));const Te="BFkKmM0gwQevEYHp6IJyGynJVnKdvMJZByjNges0FNpW-1SlHl9vPyltmPf9VjnuGKydXAEH68xDHrqteJ1RpPo";function Ie(e){const t="=".repeat((4-e.length%4)%4),r=(e+t).replace(/-/g,"+").replace(/_/g,"/"),o=atob(r);return new Uint8Array([...o].map(n=>n.charCodeAt(0)))}async function D(){try{const e=await navigator.serviceWorker.ready,t=await e.pushManager.getSubscription();t&&(console.log("[Push] Subscription lama ditemukan, akan dihapus..."),await t.unsubscribe());const r=localStorage.getItem("token");if(!r)throw new Error("Token tidak ditemukan. Pastikan Anda sudah login terlebih dahulu.");let n=(await e.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:Ie(Te)})).toJSON();delete n.expirationTime,delete n.timestamp;const a=await ee(n,r);console.log("[Push] Subscription sent to server:",a)}catch(e){throw console.error("[Push] Subscription failed:",e.message),alert("Gagal berlangganan push notification: "+e.message),e}}function W(){const e=document.getElementById("navbar");e.innerHTML="",e.appendChild(Q())}window.addEventListener("storage",e=>{e.key==="token"&&W()});window.addEventListener("load",async()=>{var t;if(W(),B(location.hash),"serviceWorker"in navigator&&"PushManager"in window)try{const r=await navigator.serviceWorker.register("/service-worker.js");console.log("Service Worker registered successfully."),Notification.permission==="granted"&&await D()}catch(r){console.error("Service Worker registration failed:",r)}"Notification"in window&&Notification.permission==="default"&&(await Notification.requestPermission()==="granted"?(console.log("Push notification permission granted"),await D()):console.log("Push notification permission denied"));const e=document.getElementById("btnSubscribe");e&&e.addEventListener("click",async()=>{if(!("serviceWorker"in navigator)){alert("Service Worker is not supported by this browser.");return}if(!("PushManager"in window)){alert("Push API is not supported by this browser.");return}if(Notification.permission!=="granted"){alert("Notification permission not granted.");return}try{await D(),alert("Successfully subscribed to push notifications!")}catch(r){console.error("Push subscription failed:",r),alert("Failed to subscribe to push notifications: "+r.message)}}),(t=document.querySelector(".skip-link"))==null||t.addEventListener("click",r=>{r.preventDefault();const o=document.getElementById("app");o&&o.focus({preventScroll:!1})})});
